/* Resources module is used to load all files required to build weather widget. */
var Resources = (function () {

    /* counter for number of files that have been loaded. */
    var scriptsLoaded = 0;
    var MAXIMUM_NUM_OF_ASYNC_FILES = 4;

    /* loadCSS: is used to add required css file to current document and set a callback function
        upon loading the file successfully. */
    var loadCSS = function (path, callback) {
        var css = document.createElement("link");
        css.addEventListener("load", callback );
        css.setAttribute("rel", "stylesheet");
        css.setAttribute("href", path);
        document.querySelector("head").appendChild(css);
    };

    /* loadJS: is used to add required JS file to current document and set a callback function
        upon loading the file successfully. */
    var loadJS = function (path, callback) {
        var js = document.createElement("script");
        js.addEventListener("load", callback );
        document.querySelector("head").appendChild(js);
        js.setAttribute("src",path);
    };

    /* loadJQueryUI: is used to fetch jquery-ui library then start building weather widget.
        Note that it must be loaded after loading of jquery js file to avoid runtime errors. */
    var loadJQueryUI = function(){
        loadJS("//code.jquery.com/ui/1.11.2/jquery-ui.min.js", buildWidget);
    }

    /* onFilesLoadedAsync: is callback function after fetching all files asynchronously. */
    var onFilesLoadedAsync = function(){
        console.debug("current file that is loaded is:",  this);
        scriptsLoaded++;

        if(scriptsLoaded === MAXIMUM_NUM_OF_ASYNC_FILES){
          console.log("asynchronous loading of scripts is done");
          loadJQueryUI("//code.jquery.com/ui/1.11.2/jquery-ui.min.js", buildWidget);
        }
    }

    var load = function () {
        console.debug('Loading required files for widget');

        loadCSS("//code.jquery.com/ui/1.11.1/themes/smoothness/jquery-ui.css",
                onFilesLoadedAsync);
        /*TODO: widget.css should be fetched from edumedia server. */
        loadCSS("css/widget.css", onFilesLoadedAsync);
        loadJS("//cdnjs.cloudflare.com/ajax/libs/skycons/1396634940/skycons.min.js",
              onFilesLoadedAsync);
        loadJS("//code.jquery.com/jquery-1.11.1.min.js",onFilesLoadedAsync);
    };

  return {
    load: load
  };

})();

var ForecastAPI = (function () {

    var forecastData;
    var constructURL = function (){
        var FORECAST_API_KEY="28595388f228499527db3647095809fc";
        var ALGONQUIN_LATITUDE = "45.348391";
        var ALGONQUIN_LONGITUDE = "-75.757045";

        /* JS Date object returns number of milliseconds since 1 January, 1970 meanwhile
           Forecast TIME field should be number of seconds since 1 January, 1970.
           So round divide result object by 1000 to convert from msec to sec.
           Finally, round the result to remove fractions (if any). */
        var TIME = Math.round((new Date())/1000);

        /* Get the weather in SI metric: Celsius, mm , kPa ... etc.
           According to Forecast API documentation, canadian units are Identical to si, except that
           windSpeed is in kilometers per hour.*/
        var UNITS = "units=ca";

        var url = "https://api.forecast.io/forecast/" +
            FORECAST_API_KEY + "/" +
            ALGONQUIN_LATITUDE + "," +
            ALGONQUIN_LONGITUDE +"," +
            TIME + "?" +
            UNITS
        ;

        return url;
    }

    var requestDataAsync = function () {
        var xhr = $.ajax(
        {
            url :  constructURL(),
            dataType :"jsonp",
            type: "GET"
        }).done(function (data){
            console.log("forecast data is loaded succsfully");
            forecastData = data;
            console.debug(forecastData);
            DailyWeather.createPanel(".weather-forecast");
        }).fail( function( ){

            console.log("failed to load forecast data");
            console.log( xhr.status );
            //TODO: handle error cases.
        });
    };

    var getData = function (){
        return forecastData;
    };

  return {
      requestDataAsync: requestDataAsync,
      getData: getData
  };

})();

var Icon = (function () {

    var set = function ( canvasID, weatherState){

    /*  Skycons is a set of ten animated weather glyphs, procedurally generated by JavaScript using the
        HTML5 canvas tag. Skycons were designed for Forecast.io */
    var skycons = new Skycons();

    /* According to thier original exmaples: http://darkskyapp.github.io/skycons/
       Canvas has been created using jQuery and set to an id.*/
    skycons.set(canvasID, weatherState);

    /* Start the icon animation. */
    skycons.play();
}
  return {
    set: set
  };

})();

var HourlyWeather = (function () {

    var getHoursTickClass = function (i){
        return (i%2==0)? "even":"odd";
    };

    var onSlidingOver = onChangeValue = function(event, ui) {

        var forecastData = ForecastAPI.getData();
        console.debug(new Date(forecastData.hourly.data[ui.value].time * 1000));
        /* Get the second row in the hourly detailed table. Note that eq filter uses zero-based index
           Then clear that row to add updated table data information for the selected value. */
        $row = $("#hourly-detailed-table tr:eq(1)").empty();
        $("<td></td>").appendTo($row).
                text(forecastData.hourly.data[ui.value].temperature).append("<sup>o<sup>");
        /*round the humidity value since some times the value contains long fraction*/
        $("<td></td>").appendTo($row).text(Math.round(
            forecastData.hourly.data[ui.value].humidity*100) + " %");
        $("<td></td>").appendTo($row).text(forecastData.hourly.data[ui.value].windSpeed + " kph");
        $("<td></td>").appendTo($row).text(forecastData.hourly.data[ui.value].cloudCover + " Okta");

        /* change corresponding weather icon and hourly summary. */
        Icon.set("widget-forecast-hourly-icon", forecastData.hourly.data[ui.value].icon);
        $(".hourly-summary").text(forecastData.hourly.data[ui.value].summary);
    };

    var createPanel = function (){
        var $slider = $('<div id="slider"></div>')
                        .appendTo($("#hourly-panel"));

        /* create a slider using jquery-ui library for 24 hour of any any day*/
        $slider.slider(
            {
                min    : 0,  // This maps to 12am (mid-night)
                max    : 23, // This maps to 11 pm
                value  : 0,  //initial value on slider
                animate: 1000, //slide the handle smoothly when the user clicks on the slider track.
                slide : onSlidingOver, //set listener for sliding action
                change: onChangeValue /* set listner after changing the slider value programmatically as
                done inside onButtonClicked */

            });

        /* create hours ticks dashes for even and odd hours*/
        $hoursTick = $('<div class="hour-ticks"></div>').appendTo($("#hourly-panel"));
        for (var i=0; i< 24; i++){
            $hoursTick.append('<span class="'+getHoursTickClass(i)+'"></span>');
        }

        /* create hours tags under the slider bar*/
        $hours = $('<div class="hours"></div>').appendTo($("#hourly-panel"));
        var timeTagObj = {am:"AM",pm:"PM"};
        for (var prop in timeTagObj){
            for(var i=2; i<=10; i+=2){
                $hours.append('<span class="hour">'+i+timeTagObj[prop]+'</span>');
            }
        }
        /* Finally insert 12AM/12PM in the appropriate locations on the sliding bar.*/
        $(".hour:contains(2AM)").before('<span class="hour">12AM</span>');
        $('<span class="hour">12PM</span>').insertBefore($(".hour:contains(2PM)"));

        /* display detailed weather information for every hour such it includes:
           humidity, cloud cover, temperature, wind speed, weather icon and summary description*/

        /*  1. Create icon div for hourly weather
            2. Append it to hourly panel*/
        $hourlyWeatherIcon = $("<div></div>").addClass("hourly-icon-container").
                            append('<canvas id="widget-forecast-hourly-icon" width="100" height="60"\
                                   </canvas>').
                            appendTo($("#hourly-panel"));

        /* Add hourly weather summary and remove last full-stop or period*/
        $("#hourly-panel").append('<p class="hourly-summary"></p>');

        $detailedInfoTable = $('<table id="hourly-detailed-table"></table>').
                            appendTo($("#hourly-panel"));
        $detailedInfoTable.append("<tr><th>Temp</th><th>Humidity</th><th>Wind</th>\                                            <th>Cloud Cover</th><tr>");
        $row = $("<tr></tr>").appendTo($detailedInfoTable);
    };

  return {
    createPanel: createPanel
  };

})();

var DailyWeather = (function () {

    var forecastData;

    var onButtonClicked = function (){
        console.debug("dialy panel button has been clicked");

        /* Toggle sliding direction for hourly panel inside the daily panel. As well as,
           the visibilty of child spans for the circular button. */
        $("#hourly-panel").slideToggle( "slow" );
        $(".expand").toggle();
        $(".fold").toggle();

        /*In case of expansion, let the slider moves from the begining till the current hour of the
            day.*/
        if("none" === $(".expand").css("display")){
            $("#slider").slider('value', 0);
            $("#slider").slider('value', new Date().getHours());
        }
    }

    var createPanel = function (weatherWidgetClass){

    /*  1. Create new div element and set its class to panel class.
        2. append panel div to current weather forecast div*/
    var $dailyPanel = $("<div></div>").addClass("daily-panel").
             appendTo($(weatherWidgetClass));

    /* Create paragraph for today*/
    $dailyPanel.append('<p class="today">TODAY</p>');

    /* 1. Create icon div for average weather of the whole day.
       2. Append it to daily panel*/
    $dailyWeatherIcon = $("<div></div>").addClass("today-icon-container").
                        append('<canvas id="widget-forecast-today-icon" width="36" height="36"\
                               </canvas>').
                        appendTo($dailyPanel);

    forecastData = ForecastAPI.getData();

    /* Set icon of weather using skycons */
    Icon.set("widget-forecast-today-icon", forecastData.daily.data[0].icon);

    /* Add today weather summary and remove last full-stop or period*/
    $dailyPanel.append('<p class="summary">' +forecastData.daily.data[0].summary.slice(0,-1) +'</p>');

    /* Add circular button to indicate that daily weather panel is expandable*/
    $button = $("<div></div>").addClass("circular-button").
                append('<span class="expand">+</span>').
                append('<span class="fold">-</span>').
                appendTo($dailyPanel).
                click(onButtonClicked);

    /* create a container for inner hourly panel inside the daily panel.*/
    $dailyPanel.append('<div id="hourly-panel"></div>');

    /* create all required div elements for hourly weather panel. */
    HourlyWeather.createPanel();
}

  return {
    createPanel: createPanel
  };

})();

document.addEventListener("DOMContentLoaded", function(){
    Resources.load();
});

function buildWidget(){
    console.log("Start to fetch data from Forecast.io website using Ajax");
    ForecastAPI.requestDataAsync();
    /*setTimeout(function (){console.log("Timeout:", ForecastAPI.getData());}, 1000);*/
    //DailyWeather.createPanel();
}
